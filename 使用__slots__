class Student(object):
    pass
    
# 尝试给实例绑定一个属性
s = Student()
s.name = 'Michael'     # 动态给实例绑定一个属性
print(s.name)          # Michael

# 给实例绑定一个方法
def set_age(self, age):
    self.age = age
    
from types import MethodType
# 给实例绑定一个方法
s.set_age = MethodType(set_age, s)
# 调用实例方法
s.set_age(25)
# 测试结果
s.age           # 25

# 给实例绑定的方法，对另一个实例不起作用
s2 = Student()
s2.set-age(25)        # 尝试调用方法出错

# 为了给所有实例都绑定方法，　可以给class绑定方法
def set_score(self, score):
    self.score = score
    
Student.set_score = set_score

# 给　class 绑定方法后，所有实例均可以调用
s.set_score(100)   
s.score      # 100
s2.set_score(99)
s2.score     # 99

# 使用 __slots__
#　限制实例的属性
class Student(object):
    # 用tuple来定义允许绑定的属性名称
    __slots__ = ('name', 'age')
    
s = Student()
s.name = 'Michael'
s.age = 25

# __slots__　定义的属性仅对当前实例起作用，对继承的子类是不起作用的

