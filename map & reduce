# map() 函数接收两个参数，一个是函数，一个是Iterable。　
# map　将传入的函数依次作用到序列的每一个元素，并把结果作为新的　Iterator　返回

def f(x):
    return x * x
    
r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])
list(r)                               # [1, 2, 9, 16, ..., 81]
# map() 传入的第一个参数是 f, 即函数本身。　由于结果是一个 Iterator, Iterator　是惰性序列，　
# 因此通过list() 函数让它把整个序列都给计算出来并返回一个list

# 把所有数字字符串化
list(map(str, [1, 2, 3, 4, 5, 6, 7, 8, 9]))       # ['1', '2', '3', ..., '9']

# reduce
# reduce 把一个函数作用在一个序列上，　这个函数必须接收两个参数，　reduce　把结果继续和序列的下一个元素做累积ｊｉｓｕａｎ
# reduce(f, [x1, x2, x3, x4])                     # f(f(f(x1, x2), x3), x4)

from functools import reduce
def add(x, y):
    return x ＋　y
    
reduce(add, [1, 3, 5, 7, 9])                     # 25

# 把序列 [1, 3, 5, 7, 9]　变成13579
from functools import reduce
def fn(x, y):
    return x * 10 + y
    
reduce(fn, [1, 3, 5, 7, 9])                     # 13579

# 把 str 转化为　int
from functools import reduce
def fn(x, y):
    return x * 10 + y
    
def char2num(s):
    digits = {'0':0, '1':1, '2':2, '3':3, '4':4, ..., '9':9}
    return digits[s]
    
# 做一包装
from functools import reduce
DIGITS = {'0':0, '1':1, '2':2, '3':3, '4':4, ..., '9':9}
def str2int(s):
    def fn(x, y):
        return x * 10 + y
    def char2num(s):
        return DIGITS[s]
    return reduce(fn, map(char2num, s))
    

    
reduce(fn, map(char2num, '13579'))            # 13579

# 利用　map() 函数，把用户输入的不规范的英文名字，　变为首字母大写，　其他小写的规范名字
def normalize(name):
    name = name[:1].upper() + name[1:].lower()
    return name
    
L1 = ['Adam', 'dssd', 'ghdT']
L2 = list(map(normalize, L1)) 

# 编写一个 prod() 函数，可以接受一个 list 并利用　reduce() 求积
from functools import reduce
def prod(L):
    def mul(x, y):
        return x * y
    return reduce(mul, L)
    
# 利用 map 和 reduce 将字符串 '123.456' 转换成　'123.456'
from functools import reduce
def str2float(s):
    s1 = list(s)
    s1.remove('.')
    m = len(s) - s.index('.') - 1  # s.index('.') 表示字符串小数点前面的字符的数量
    def mul(x, y):
        return x * 10 + y
    n = reduce(mul, list(map(int, s1)))　　　　# map(int, s1) 将　int 作用于　s1 中的每一个字符，　使其变为 int
    return n / pow(10, m)
    


