# 面向对象最重要的就是类和实例，类是抽象的模板，实例则是根据类创建出来的一个个具体的对象
# 每个对象都有相同的方法，但各自的数据可能不同

# 在python中定义类是通过 class 关键词
# class　后面紧跟着是类名，类名通常是大写开头的单词，紧接着就是(object)，表示该类是从那个类继承下来，
# 如果没有合适的继承类，就使用object类，这时所有类最终都会继承的类
# 创建实例是通过类名+（）实现的

# __init__方法的第一个参数永远是self,表示创建实例本身
# 有了__init__方法，在创建实例的时候，就不能传入空的参数
# 必须传入与__init__方法匹配的参数，但是self不需要传，python解释器自己会把实例变量给传进去

class Student(object):
    def __init__(self, name, score):
        self.name = name
        self.score = score
        
    def get_grade(self):
        if self.score >= 90:
            return 'A'
        elif self.score >= 60:
            return 'B'
        else:
            return 'C'
            
lisa = Student('Lisa', 99)
bart = Student('Bart', 59)
print(lisa.name, lisa.get_grade())
print(bart.name, bart.get_grade())

# 访问限制
# 外部代码可以可以自由的修改一个实例的属性
bart = Student('Bart', 59)
bart.score               # 59
bart.score = 90
bart.score               # 90

# 在属性的名称前面加上两个下划线 __　内部属性就不能被外部访问，
# 实例的变量名如果以　__开头，就变成了一个私有变量
class Student(object):
    def __init__(self, name, score):
        self.__name = name
        self.__score = score
        
    def print_score(self):
        print('%s: %s' % (self.__name, self.__score))
        
bart = Student('Bart', 58)
bart.__name               # 错误，不能访问

# 外部代码可以通过给Student类增加get_name和get_score这样的方法来获取name和score
class Student(object):
    ...
    def get_name(self):
        return self.__name
        
    def get_score(self):
        return self.__score
        
# 外部代码可以通过给 Student类增加 set_score　方法来修改 score等
class Student(object):
    ...
    def set_score(self, score):
        self.__score = score
        
# 在python　中　类似　__xx__这样的变量是特殊变量，特殊变量是可以直接访问的。
# 双下划线开头的实例变量在一定程度上可以外部访问，
# 如上诉的 __name 不能直接访问是因为 python 解释器对外把 __name　变量改成了 _Student__name
# 所以任然可以通过 _Student__name　来访问 __name　变量  
# 但是建议不要这么做
bart._Student__name           # Bart


bart = Student('Bart', 89)
bart.get_name()            # Bart
# 此处的　__name 变量和　class 内部的 __name 变量不是一个变量，　
# 内部的 __name 变量已经被python解释器自动改为 _Student__name, 而外部代码给 bart　新增了一个　__name 变量
bart.__name = 'NN'
bart.__name                # NN

class Student(object):
    def __init__(self, name, gender):
        self.__name = name
        self.__gender = gender
    def get_name(self):
        return self.__name
    def get_gender(self):
        return self.__gender
    def set_name(self, name):
        self.__name = name
    def set_gender(self, gender):
        if gender == 'male' or gender == 'female':
            self.__gender = gender

bart = Student('Bart', 'male')
if bart.get_gender() != 'male':
    print('Error!')
else:
    bart.set_gender('female')
    if bart.get_gender() != 'female':
        print('Error!')
    else:
        print(‘Success!’)



        
