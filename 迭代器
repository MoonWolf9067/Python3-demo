# 可直接作用于 for 循环的数据类型有如下的几种
# 集合数据类型 如  list, tuple, dict, set, str等
# generator  包含生成器和带 yield 的 generator function
# 可直接作用于 for 循环的对象统称为可迭代对象； Iterable
# 用 isinstance() 来判断一个对象是否是 Iterable 对象

from collections import Iterable
isinstance([], Iterable)                    # True

# 可以被 next() 函数调用并不断返回下一个值的对象称为迭代器； Iterator
# 可以使用 isinstance() 来判断一个对象是否是 Iterator 对象
# 生成器不但可以作用于 for 循环， 还可以被 next() 函数不断调用并返回下一个值，直到最后抛出 StopIteration 错误表示无法继续返回下一个值

from collections import Iterator
isinstance([], Iterator)                  # False

# 生成器都是 Iterator 对象， 但 tuple, list, dict, str虽然是Iterable, 但不是 Iterator
# 把list, dict, str等 Iterable 变成 Iterator 可以使用 iter() 函数
isinstance(iter([]), Iterator)            # True


# Iterator 对象表示的是一个数据流， Iterator对象可以被next()函数调用并不断的返回下一个数据
# 该数据流可以看成是一个有序序列，但我们不能提前知道序列的长度，只能不断通过next()函数实现按需计算下一个数据
# Iterator 的计算是惰性的，只有在需要返回下一个数据时它才会计算

Iterator 甚至可以表示一个无限大的数据流，

# 关于对象
o = triangles()
next(o)
next(o)
# 上诉两句都是对同一个对象进行迭代， 因为 o 是实例化后的对象的引用，是固定不变的

next(triangles())
next(triangles()) 
# 上诉两句是对不同的对象进行迭代， triangles() 每次调用都会实例化一个对象， 只不过没有指定引用而已
# 相当于 o1 = triangles()    o2 = triangles()
